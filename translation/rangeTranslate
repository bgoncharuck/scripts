#!/bin/bash
help()
{
  echo -e "rangeTranslate \"6\" \"abcde\" \"k\" \"text\""
  echo ""
  echo -e "rangeTranslate \"16\" \"16characters 16characters 16characters\" \"129characters 1character 16characters\" \"text\""
  echo -e "rangeTranslate \"99\" -d \":\" \"99characters:99characters:99characters\" \"anycharacters:anycharacters:anycharacters\" \"text\""
}

#arguments
if ! [[ "$#" =~ ^[1,4,6]$ ]]; then
  help
  exit 2
fi

case "$#" in
  1)
    help
    if [ "$1" != "-h" ]; then
      exit 2; else exit 0; fi
  ;;
  4)
    if ! [[ "$1" =~ ^[0-9]+$ ]]; then
      help; exit 2; fi
    inputString="$4"
    delimeter=" "
    fromPatternString="$2"
    toPatternString="$3"
  ;;
  6)
    if [ "$2" != "-d" ] || ! [[ "$1" =~ ^[0-9]+$ ]]; then
      help; exit 2; fi
    inputString="$6"
    delimeter="$3"
    fromPatternString="$4"
    toPatternString="$5"
    ;;
esac
range="$1"

# split two strings into substrings of key-value pairs
while [ -n "$fromPatternString" ] && [ -n "$toPatternString" ]; do
  IFS="$delimeter" read -r key fromPatternString <<<"$fromPatternString"
  IFS="$delimeter" read -r val toPatternString <<<"$toPatternString"
  # create an associative array of substrings pairs
  translateMap["$key"]="$val"
done

lengthOfInput="${#inputString}"
result=""
for ((curPos=0; "$curPos" < "$lengthOfInput"; curPos="$curPos"+"$range")); do
  currentRange="${inputString:curPos:$range}"

  # if currentRange found as key, replace it with value of translateMap
  [[ -z "${translateMap["$currentRange"]+unset}" ]] && result="$result$currentRange" || result="$result${translateMap["$currentRange"]}"
done

echo "$result"
