#!/bin/sh
set -e
#Don't know whatTypeOfNames you_are_using, butILikeThisOne.
#I want to know how to done these all arguments checks better in bash.
#And if you know how, I'll be really gratefull for this information,

functionalityName=""
repository="bgoncharuck"
tag=""
helpCalled=0
helpExitCode=0
#Thought about "stage" variable in case of more stages needed, but let it be "isDevelopment"
isDevelopment=0

#repeating fragments of code
function someSortOfThrow() {
  # if error code is 2, show help (2 is incorrect arguments code)
  # $1 is error message
  # $2 is error code
  echo -e $1
  if [ $2 -ne 2 ] ; then
    exit $2; fi
  helpExitCode=$2
  helpCalled=1
}
function argumentPush() {
  if ! [[ "$1" =~ ^(production|development)$ ]] ; then
    someSortOfThrow "Invalid stage name \"${1}\"." 2; fi

  functionalityName=$2
  tag=$3
  isDevelopment=$([[ $1 == "development" ]] && echo 1 || echo 0)
}
function argumentGetAndGetBuildType() {
  if [ $1 -gt 1 ] ; then
    someSortOfThrow "Invalid number of arguments." 2; fi
  functionalityName=$2
}

#arguments parser
if [ "$1" == "-h" ] && [ $# -gt 1 ] || [ "$1" == "-r" ] && [ $# -lt 3 ] || [ $# -lt 1 ]  ; then
  someSortOfThrow "Invalid number of arguments." 2

elif ! [[ "$1" =~ ^(push|get|get-build-type|-h|-r)$ ]] ; then
  someSortOfThrow "Invalid first argument \"${1}\"." 2
elif [ "$1" == "-r" ] && ! [[ "$3" =~ ^(push|get|get-build-type)$ ]] ; then
  someSortOfThrow "Invalid third argument \"${3}\"." 2

elif [ "$1" == "push" ] ; then
  argumentPush "${3}" "${1}" "${2}"
elif [ "$3" == "push" ] ; then
  argumentPush "${5}" "${3}" "${4}"

elif [[ "$1" =~ ^(get|get-build-type)$ ]] ; then
  argumentGetAndGetBuildType "${#}" "${1}"
elif [[ "$3" =~ ^(get|get-build-type)$ ]] ; then
  argumentGetAndGetBuildType "${#}" "${3}"

fi
while getopts h?r: additionalOption
do
  case "${additionalOption}" in
    h) helpCalled=1;;
    r) repository=${OPTARG};;
  esac
done
#arguments parser end

#functionality start
if [ $helpCalled -ne 0 ]; then
  echo -e "\nFunctionality:"
  echo -e "tagthetag2 [option] push [version] [build-type]\t- add tag"
  echo -e "tagthetag2 [option] get                        \t- gives version"
  echo -e "tagthetag2 [option] get-build-type             \t- gives information about build type"
  echo "-"
  echo "Options:"
  echo -e "tagthetag2 -r [repository] [function]          \t- change default repository name"
  echo -e "tagthetag2 -h                                  \t- prints help"
  exit $helpExitCode
fi

#only now "git tag" is called and called once
gittag="$(git tag --points-at HEAD)"

tagCount=$(echo $gittag | \
#git tag output somehow similar to xargs when used here.
#So we need to switch it to lines.
awk '{NF++;while(NF-->1)print $NF}' | \
#we can't use wc because it counts blank lines.
#So we need awk again, to skip these blank lines first.
awk 'NF > 0'| wc -l)

case $functionalityName in

  push)
    if [ $tagCount -gt 0 ] ; then
      someSortOfThrow "You already got tags on your current HEAD.\nYou can use\
      \"git tag --points-at HEAD\" to find out and \"git tag -d [TAG]\" to remove it." 1
    fi

    tag="${repository}/${tag}"
    if [ $isDevelopment -eq 1 ] ; then tag+="suffix"; fi
    git tag $tag
  ;;

  get|get-build-type)
    if [ $tagCount -eq 0 ] ; then
      #is it really an error? I don't sure.
      someSortOfThrow "There is no tags on current HEAD." 1
    elif [ $tagCount -gt 1 ] ; then
      someSortOfThrow "There are more than one tag on current HEAD." 1
    elif [[ -z "$(echo $gittag | grep $repository)" ]] ; then
      someSortOfThrow "Incorect repository name." 2
    fi


    if [ $functionalityName == "get" ] ; then
      echo $gittag | tr -d '/,[:alpha:]'
      exit 0
    fi

    if [ $functionalityName == "get-build-type" ] ; then
      # @TODO More stages can be added here, if needed
      echo $([[ $gittag =~ "suffix" ]] && echo development || echo production)
      exit 0
    fi
  ;;
esac
#functionality end

#I'm really sick with arguments management.
#Do you know how could I add --help argument instead of -h?
#Also, I don't like how arguments managed here at all.
